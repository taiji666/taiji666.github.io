import{_ as s,c as a,G as i,b as n}from"./chunks/framework.D5KJDRhN.js";const e=JSON.parse('{"title":"23 函数式思想在 React 框架设计中的实践","description":"","frontmatter":{"title":"23 函数式思想在 React 框架设计中的实践","date":"2025-02-22T00:00:00.000Z","categories":["JavaScript 函数式编程实践指南"],"head":[["link",{"rel":"canonical","href":"https://www.doit.ip-ddns.com/pages/repository/编程/JavaScript 函数式编程实践指南/23 函数式思想在 React 框架设计中的实践"}]]},"headers":[],"relativePath":"pages/repository/编程/JavaScript 函数式编程实践指南/23 函数式思想在 React 框架设计中的实践.md","filePath":"pages/repository/编程/JavaScript 函数式编程实践指南/23 函数式思想在 React 框架设计中的实践.md","lastUpdated":1739887664000}');const p=s({name:"pages/repository/编程/JavaScript 函数式编程实践指南/23 函数式思想在 React 框架设计中的实践.md"},[["render",function(s,e,p,t,l,h){return n(),a("div",null,e[0]||(e[0]=[i('<div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>React 是一个用于构建用户界面的 JS 库（严格来说是库，但“框架”似乎也已经成为一种约定俗成的叫法，下文不做区分）。  </span></span>\n<span class="line"><span>尽管它不是一个严格意义上的函数式编程框架，但它在设计和实践中很大程度上受到了函数式思想的影响，“含 FP 量”较高。从个人的经验来看，有不少同学也是在深入学习过 React 后，才对函数式编程产生了浓厚的兴趣。因此，本节我们就将从函数式的视角出发，重新解构 React。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="宏观设计-数据驱动视图" tabindex="-1">宏观设计：数据驱动视图 <a class="header-anchor" href="#宏观设计-数据驱动视图" aria-label="Permalink to &quot;宏观设计：数据驱动视图&quot;">​</a></h2><p>众所周知，React 的核心特征是“<strong>数据驱动视图</strong>”，这个特征在业内有一个非常有名的函数式来表达：</p><p><a class="img-fancybox" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/477d33a011234bd5b99ecd739c462cd1~tplv-k3u1fbpfcp-zoom-1.image" data-fancybox="gallery" data-caption=""><img class="post-img" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/477d33a011234bd5b99ecd739c462cd1~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><span class="post-img-tip"></span></a></p><p>这个表达式有很多的版本，一些版本会把入参里的 data 替换成 state，但它们本质上都指向同一个含义，那就是 <strong>React 的视图会随着数据的变化而变化</strong>。</p><p>我们不妨把这个特征拿到 React 的工作原理中去看一看。</p><h3 id="react-组件渲染的逻辑分层" tabindex="-1">React 组件渲染的逻辑分层 <a class="header-anchor" href="#react-组件渲染的逻辑分层" aria-label="Permalink to &quot;React 组件渲染的逻辑分层&quot;">​</a></h3><p>随手写一个 React 组件：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">num</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setNum</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{num}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>用 babel 转换一遍这段代码，可以得到下图右侧的结果：</p><p><a class="img-fancybox" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92f82d1da81f45cfbee769d82e0a8967~tplv-k3u1fbpfcp-zoom-1.image" data-fancybox="gallery" data-caption=""><img class="post-img" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92f82d1da81f45cfbee769d82e0a8967~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><span class="post-img-tip"></span></a></p><p>图中我将 JSX 的转译结果高亮了出来，这里也是我想给大家划的第一个重点——<strong>JSX 的本质，是</strong> <code>React.createElement</code> <strong>这个 JS 调用的语法糖。</strong></p><p>熟悉 React 的同学不妨在自己脑海中思考一下这个问题：<code>React.createElement</code>做了什么事情？它能够直接渲染出真实的 DOM 组件吗？</p><p>答案是不能，<code>React.createElement</code>计算出来的那玩意儿叫做虚拟 DOM，虚拟 DOM 仅仅是对真实 DOM 的一层描述而已。要想把虚拟 DOM 转换为真实 DOM，我们需要调用的是 <code>ReactDOM.render()</code>这个 API ：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 首先你的 HTML 里需要有一个 id 为 root 的元素</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rootElement</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> document.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getElementById</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;root&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这个 API 调用会把 &lt;App/&gt; 组件挂载到 root 元素里</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ReactDOM.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;, rootElement)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>也就是说，在 React 组件的初始化渲染过程中，有以下两个关键的步骤：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-   结合 state 的初始值，计算 `&lt;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;` 组件对应的**虚拟 DOM**</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">-   将虚拟 DOM 转化为**真实 DOM**</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>相似地， React 组件的更新过程，同样也是分两步走：</p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   结合 state 的变化情况，计算出虚拟 DOM 的变化 </span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   将虚拟 DOM 转化为真实 DOM</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在我们再回头看 <code>UI = f(data)</code>这个公式。</p><p>其中 <code>data</code>这个自变量，映射到 <code>React</code>里就是 <code>state</code>。</p><blockquote><p>注：我在社区还见到过 <code>UI=f(state, props)</code>这种写法，这种写法认为 React 中的数据需要被严格地分类为 <code>props</code>和<code>state</code>。我个人更认同 <code>UI = f(data)</code>或<code>UI = f(state)</code>这种写法，因为子组件的 <code>props</code>本身也是父组件的 <code>state</code>。倘若我们把整个 React 应用看作一个大的整体，而不是去看父子组件之间的微观关系，那么 React 应用中的驱动 UI 变化的数据其实只有 <code>state</code>。</p></blockquote><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>因变量 `UI` 对应的则是我们肉眼可见的渲染内容，它的形态与宿主环境息息相关。在 React 中，UI 指的就是浏览器中的 DOM。   </span></span>\n<span class="line"><span>`f()`函数则对应的是 React 框架内部的运行机制，结合上文的分析，这套运行机制整体上可以分为两层（如下图所示）：</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p><a class="img-fancybox" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41844dba075f419b8cc76a3dae2190b5~tplv-k3u1fbpfcp-zoom-1.image" data-fancybox="gallery" data-caption=""><img class="post-img" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/41844dba075f419b8cc76a3dae2190b5~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><span class="post-img-tip"></span></a></p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>-   **计算层**：负责根据 state 的变化计算出虚拟 DOM 信息。这是一层较纯的计算逻辑。</span></span>\n<span class="line"><span>-   **副作用层**：根据计算层的结果，将变化应用到真实 DOM 上。这是一层绝对不纯的副作用逻辑。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>将较纯的计算与不纯的副作用分离，从这样的宏观设计中，我们已经可以初步窥得函数式编程的影子。</p><p>在 <code>UI = f(data)</code> 这个公式中，数据是自变量，视图是因变量。</p><p>而<strong>组件</strong>作为 React 的核心工作单元，其作用正是<strong>描述数据和视图之间的关系</strong>。</p><p>也就是说，若是把这个公式代入到微观的组件世界中去，那么 React 组件毫无疑问对应的就是公式中的 <code>f()</code> 函数。</p><h2 id="组件设计-组件即函数" tabindex="-1">组件设计：组件即函数 <a class="header-anchor" href="#组件设计-组件即函数" aria-label="Permalink to &quot;组件设计：组件即函数&quot;">​</a></h2><p>四年前，我在团队的一次 React 分享中，用到了“组件即函数”这个标题，差点引发了一场骂战——彼时，Class 组件的主导地位还没有明显的变化，很多人也想不明白，为什么 Class 写的好好的，非要往函数上去迁移。四年后的今天，团队的校招生已经是入行直接就学 React16+ 的00后了，再聊起“组件即函数”这个话题时，争论已经演变为了共识。React 官方对“组件”这一核心概念的最新阐述也佐证了这一点：</p><blockquote><p>组件，从概念上类似于 JavaScript 函数。它接受任意的入参（即 “props”），并返回用于描述页面展示内容的 React 元素。 ——React 官方文档</p></blockquote><p>定义一个 React 组件，其实就是定义一个吃进 props、吐出 UI（注意，此处的 UI 指的是对 UI 的描述，而不是真实 DOM，下文同） 的函数：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;{props.name}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果这个组件需要维护自身的状态、或者实现副作用等等，只需要按需引入不同的 Hooks（下面代码是一个引入 <code>useState</code>的示例）：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  </span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {props.name} age is {age}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;add age&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>自 React16.8 以来，如楼上所示的【函数式组件 + React-Hooks】研发模式逐渐成为了主流。尽管今天我们仍然可以在 React 应用中创建和使用 Class 组件，但不得不承认的是，使用 React 的大多数前端团队都已经完成了从 Class 组件到函数组件的转型，React 自身也已经很多年没有更新过基于 Class 组件的重要特性了。<strong>从趋势上看，函数组件+ React-Hooks 才是 React 的未来</strong>。</p><h2 id="函数组件的心智模型-如何函数式地抽象组件逻辑" tabindex="-1">函数组件的心智模型：如何函数式地抽象组件逻辑 <a class="header-anchor" href="#函数组件的心智模型-如何函数式地抽象组件逻辑" aria-label="Permalink to &quot;函数组件的心智模型：如何函数式地抽象组件逻辑&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>在 React-Hooks 推出以前，React 函数组件的定位仅仅是**对类组件的一种补充**。  </span></span>\n<span class="line"><span>当时有一个很热门的 React 面试题，问“什么是 React 无状态组件”。其实无状态组件就是函数组件的一个别名——在缺少 Hooks 加持的情况下，函数组件内部无法定义和维护 state，便表现为所谓的“stateless（无状态）”。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>在那时，函数组件能够，也仅仅能够完成从 props 到 UI 的映射——这样的转换逻辑是<strong>绝对纯的、没有任何副作用的</strong>。这一时期的函数式组件，毫无疑问是<strong>纯函数</strong>。</p><p>直到 React-Hooks 的出现，才允许函数组件“<strong>拥有了自己的状态</strong>”（注意，这句话我打了个引号，这是个伏笔，下文很快会收回）。像这样：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> App</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">props</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">age</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> useState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; {props.name} age is {age}&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">h1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> onClick</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setAge</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)}&gt;add age&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  );</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>对于这个函数组件来说，即便输入相同的 props，也不一定能得到相同的输出。这是因为函数内部还有另一个变量 <code>state</code>。从这个角度看，它似乎没那么纯了。</p><p><strong>真的没那么纯了吗？</strong></p><p>这里我想问大家另一个问题：<code>useState()</code> 的状态管理逻辑是在哪里维护的？是在<code>App()</code>函数的内部？还是在 <code>App()</code>函数之外呢？</p><p>答案是，在 <code>App()</code> 函数之外！</p><p>这个问题其实不难理解：函数执行过程是一次性的，函数是没有记忆的。如果 <code>useState()</code> 是在 <code>App()</code>函数内部维护组件状态，那么每次组件渲染时，伴随着 <code>App()</code>函数执行完毕，<code>App()</code>内部的状态应该和函数上下文一起被销毁了才对。</p><p>这样的话，每次调用 <code>App()</code>函数，我们进入的都应该是一个全新的上下文，每次最多只能拿到状态的初始值而已。</p><p>但现实是，不管 <code>App</code>组件渲染（<code>App</code>组件渲染===<code>App()</code>函数执行）了多少次，<code>useState()</code>总是能“记住”组件最新的状态——这意味着<code>App()</code>函数上下文被销毁时，它所对应的组件状态其实被保留了下来。要做到这一点，只能是把状态独立到 <code>App()</code>的外面去维护。</p><blockquote><p>注：这种 Hook 与组件之间的松耦合关系，并不是 <code>useState()</code>所特有的，而是所有 React Hooks 的共性。</p></blockquote><p>也就是说，对于函数组件来说，state 本质上也是一种<strong>外部数据</strong>。函数组件能够消费 state，却并不真正拥有 state <strong>。</strong></p><p>当我们在函数体内调用 <code>useState()</code> 的时候，相当于把函数包裹在了一个具备 <code>state</code> 能力的“壳子”里。只是这层“壳子”是由 React 实现的，我们作为用户感知不到，所以看起来像是函数组件“拥有了自己的状态”一样。</p><p>这样说可能有点抽象，用这段伪代码来示意可能会更通透一些：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Wrapper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">setState</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}) {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">App</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{state} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setState</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{setState}/&gt;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>尽管真实的 <code>useState</code>源码并不是这样写的（比这个复杂得多），但是真实的 <code>useState</code>源码同样是在 <code>App()</code>函数之外维护 <code>state</code>，同样会在 <code>state</code>发生变化时，像 <code>Wrapper</code>一样去触发 <code>App()</code>函数的再执行（也即<code>App</code>组件的“重渲染”）。</p><p>也就是说，至少从逻辑上来看，<code>Wrapper</code>这段伪代码足以描述 <code>useState</code>和函数组件之间的关联关系——<code>useState</code>所维护的状态(<code>state</code>），本质上和 <code>props</code>、<code>context</code>等数据一样，都可以视作是 <code>App</code>组件的 <strong>“外部数据”，也即</strong> <code>App() </code><strong>函数的“入参”</strong> 。</p><p>我们用 <code>FunctionComponent</code> 表示任意一个函数组件，函数组件与数据、UI 的关系可以概括如下：</p><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UI</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> FunctionComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(props, context, state)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p><strong>对于同样的入参（也即固定的</strong> <code>props</code> <strong>、</strong> <code>context</code> <strong>、</strong> <code>state</code> <strong>），函数组件总是能给到相同的输出。因此，函数组件仍然可以被视作是一个“纯函数”。</strong></p><p>由此我们可以看出：<strong>Hook 对函数能力的拓展，并不影响函数本身的性质。函数组件始终都是从数据到 UI 的映射，是一层很纯的东西</strong>。而以 <code>useEffect</code>、<code>useState</code> 为代表的 Hooks，则负责消化那些不纯的逻辑。比如状态的变化，比如网络请求、DOM 操作等副作用。</p><p><strong>也就是说，在组件设计的层面，React 也在引导我们朝着“纯函数/副作用”这个方向去思考问题</strong>。</p><p>在过去，设计一个 Class 组件，我们需要思考“<strong>如何将业务逻辑解构到五花八门的生命周期里</strong>”。</p><p>而现在，设计一个函数组件，我们关注点则被简化为“<strong>哪些逻辑可以被抽象为纯函数，哪些逻辑可以被抽象为副作用</strong>”（如下图）。</p><p><a class="img-fancybox" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a068ef2656674613a90ee2ceacdb17bc~tplv-k3u1fbpfcp-zoom-1.image" data-fancybox="gallery" data-caption=""><img class="post-img" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a068ef2656674613a90ee2ceacdb17bc~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><span class="post-img-tip"></span></a></p><p>我们关注的细节变少了，需要思考的问题变少了，抽象的层次更高了——<strong>React 背靠函数式思想，重构了组件的抽象方式，为我们创造了一种更加声明式的研发体验。</strong></p><h2 id="函数组件的心智模型-如何函数式地实现代码重用" tabindex="-1">函数组件的心智模型：如何函数式地实现代码重用 <a class="header-anchor" href="#函数组件的心智模型-如何函数式地实现代码重用" aria-label="Permalink to &quot;函数组件的心智模型：如何函数式地实现代码重用&quot;">​</a></h2><p>在代码重用这个方面，React 其实一直是很“函数式”的。</p><p>即便是在 Class 组件占据统治地位的时期，React 官方在代码重用方面的建议也是“要组合，不要继承”（下图截图自 React 官网，传送门<a href="https://zh-hans.reactjs.org/docs/composition-vs-inheritance.html#gatsby-focus-wrapper" target="_blank" rel="noreferrer">React 官方文档-核心概念Part11</a>）：</p><p><a class="img-fancybox" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08005fc9305a45df9084fad1565c89a7~tplv-k3u1fbpfcp-zoom-1.image" data-fancybox="gallery" data-caption=""><img class="post-img" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08005fc9305a45df9084fad1565c89a7~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><span class="post-img-tip"></span></a></p><p>在组合思想的渗透下，发展出了“React 设计模式”这种东西，经典的 React 设计模式包括但不限于：</p><div class="language-markdown vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   高阶组件</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   render props</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   容器组件/展示组件</span></span>\n<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   ...</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在过去，这些设计模式曾一度被奉为“金科玉律”，也曾是各厂前端面试的热门考点。但在今天，随着“函数组件+Hooks”的推广，“金科玉律”逐渐也变成了“老黄历”——过去需要设计模式来解决的问题，今天大多都可以用 Hooks 求解，并且解法更简洁、更优雅、更“函数式”。</p><p>这个变化是我一直津津乐道的一个点：旧版本 React 选用 Class 组件作为主要的逻辑载体。在当时，为了写出高质量、易维护的 React 代码，我们不得不求助于各种各样的 React 设计模式，而这些设计模式本身又是函数式的。</p><p>这种别扭的状态持续了数年，大多数的开发者都不觉得有什么不对，甚至认为“React 就该这样学”。</p><p>直到4年前，Hooks 的出现使得函数组件具备了“扛大旗”的能力、React 进一步“函数式”化。这时大家才逐渐意识到：原来，“<strong>设计模式”对于 React 来说，并不是一个必选项，而更像是一个“补丁”</strong> ——当编程范式与框架底层逻辑略显违和时，我们需要额外学习大量的设计模式作为补充；当编程范式和框架底层逻辑高度契合时，我们只需要闭眼梭哈就够了。</p><p>下一节，我们就将通过一系列的代码示例，围绕“代码重用”这个话题，探讨 React 从“Class组件+设计模式”到“函数组件+Hooks”的研发模式变革。彼时，相信大家会对上面几段内容产生更加强烈的共鸣。</p>',76)]))}]]);export{e as __pageData,p as default};
