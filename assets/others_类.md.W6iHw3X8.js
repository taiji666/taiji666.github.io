import{_ as r}from"./chunks/ArticleMetadata.lUqVc9UV.js";import{_ as c,D as o,o as n,c as g,I as e,w as p,R as l,b as k,e as d}from"./chunks/framework.Zg78vl19.js";import"./chunks/md5.c_x3X9sz.js";const M=JSON.parse('{"title":"python类","description":"","frontmatter":{"title":"python类","date":"2024-06-28T00:28:13.000Z","tags":"python"},"headers":[],"relativePath":"others/类.md","filePath":"others/类.md","lastUpdated":1724856983000}'),y={name:"others/类.md"},C=l('<h2 id="要点速记" tabindex="-1">要点速记 <a class="header-anchor" href="#要点速记" aria-label="Permalink to &quot;要点速记&quot;">​</a></h2><ul><li>类方法可以不用实例直接调用</li><li>类属性只能用类修改，而不能用实例的对象修改</li><li>类属性一旦修改，所有该类实例化出的对象该属性都会被修改</li></ul><p>🎉 你好！我是 Mr. Ranedeer 🦌，你可以称呼我为 Ranedeer 老师。我会用中文帮助你学习，并且确保我们一起学习的过程既有趣又有效！</p><p>以下是你的学习配置：</p><ul><li>深度：高中</li><li>学习风格：主动</li><li>沟通风格：苏格拉底式</li><li>语气风格：鼓励</li><li>推理框架：因果</li><li>表情符号：启用</li><li>语言：中文</li></ul><p>你可以随时调整这些配置来更好地适应你的学习需求。如果你需要更改配置，请访问这个链接： <a href="https://chat.openai.com/g/g-0XxT0SGIS-mr-ranedeer-config-wizard" target="_blank" rel="noreferrer">配置向导</a> .</p><p>接下来你想学习什么呢？你可以使用以下命令：</p><ul><li>/plan：制定学习计划</li><li>/start：开始一节课</li><li>/continue：继续学习</li><li>/example：查看配置示例</li></ul><p>请告诉我你想要做什么，我们一起开始吧！ 🎓✨</p><p>You:</p><ul><li>/plan 学习 python 类的用法，深度为专家级</li></ul><p>ChatGPT:</p><hr><h1 id="prerequisite" tabindex="-1">Prerequisite <a class="header-anchor" href="#prerequisite" aria-label="Permalink to &quot;Prerequisite&quot;">​</a></h1>',14),A=l('<h3 id="_0-1-python-基础" tabindex="-1">0.1 Python 基础 <a class="header-anchor" href="#_0-1-python-基础" aria-label="Permalink to &quot;0.1 Python 基础&quot;">​</a></h3><ul><li>Python 语法基础：变量、数据类型、运算符、条件语句、循环、函数等。</li><li>Python 模块和包：如何导入和使用标准库模块以及第三方包。</li></ul><h3 id="_0-2-面向对象编程概念" tabindex="-1">0.2 面向对象编程概念 <a class="header-anchor" href="#_0-2-面向对象编程概念" aria-label="Permalink to &quot;0.2 面向对象编程概念&quot;">​</a></h3><ul><li>面向对象编程（OOP）的基本概念：类、对象、继承、多态、封装。</li><li>OOP 的优势和应用场景。</li></ul><h3 id="_0-3-python-类和对象基础" tabindex="-1">0.3 Python 类和对象基础 <a class="header-anchor" href="#_0-3-python-类和对象基础" aria-label="Permalink to &quot;0.3 Python 类和对象基础&quot;">​</a></h3><ul><li>类的定义和对象的创建。</li><li>类属性和方法。</li><li>实例属性和方法。</li><li><code>__init__</code> 方法。</li></ul><h3 id="_0-4-类的继承" tabindex="-1">0.4 类的继承 <a class="header-anchor" href="#_0-4-类的继承" aria-label="Permalink to &quot;0.4 类的继承&quot;">​</a></h3><ul><li>单继承和多继承。</li><li><code>super()</code> 函数的使用。</li><li>方法重载和重写。</li></ul><h3 id="_0-5-类的高级特性" tabindex="-1">0.5 类的高级特性 <a class="header-anchor" href="#_0-5-类的高级特性" aria-label="Permalink to &quot;0.5 类的高级特性&quot;">​</a></h3><ul><li>类属性和类方法 (<code>@classmethod</code>)。</li><li>静态方法 (<code>@staticmethod</code>)。</li><li>魔术方法（<code>__str__</code>, <code>__repr__</code>, <code>__eq__</code> 等）。</li></ul><h1 id="main-curriculum" tabindex="-1">Main Curriculum <a class="header-anchor" href="#main-curriculum" aria-label="Permalink to &quot;Main Curriculum&quot;">​</a></h1>',11),F=l(`<h3 id="_1-1-python-类的深入理解" tabindex="-1">1.1 Python 类的深入理解 <a class="header-anchor" href="#_1-1-python-类的深入理解" aria-label="Permalink to &quot;1.1 Python 类的深入理解&quot;">​</a></h3><ul><li>类和对象的内部工作机制。</li><li>元类（Metaclass）的概念及其应用。</li></ul><h3 id="_1-2-属性和方法的高级用法" tabindex="-1">1.2 属性和方法的高级用法 <a class="header-anchor" href="#_1-2-属性和方法的高级用法" aria-label="Permalink to &quot;1.2 属性和方法的高级用法&quot;">​</a></h3><ul><li>使用 <code>property</code> 装饰器定义属性。</li><li>描述符（Descriptor）的使用和实现。</li><li>动态属性的创建和管理。</li></ul><h3 id="_1-3-继承与组合的高级应用" tabindex="-1">1.3 继承与组合的高级应用 <a class="header-anchor" href="#_1-3-继承与组合的高级应用" aria-label="Permalink to &quot;1.3 继承与组合的高级应用&quot;">​</a></h3><ul><li>继承的深层次理解和应用场景。</li><li>组合（Composition）与聚合（Aggregation）的区别和使用场景。</li><li>MRO（方法解析顺序）的详细解释。</li></ul><h3 id="_1-4-抽象基类-abc" tabindex="-1">1.4 抽象基类（ABC） <a class="header-anchor" href="#_1-4-抽象基类-abc" aria-label="Permalink to &quot;1.4 抽象基类（ABC）&quot;">​</a></h3><ul><li><code>abc</code> 模块和抽象基类的定义。</li><li>抽象方法和抽象属性的实现。</li></ul><h3 id="_1-5-面向对象设计模式" tabindex="-1">1.5 面向对象设计模式 <a class="header-anchor" href="#_1-5-面向对象设计模式" aria-label="Permalink to &quot;1.5 面向对象设计模式&quot;">​</a></h3><ul><li>常用的设计模式（如单例模式、工厂模式、观察者模式等）在 Python 中的实现。</li><li>使用设计模式优化代码结构和提升代码可维护性。</li></ul><h3 id="_1-6-元编程" tabindex="-1">1.6 元编程 <a class="header-anchor" href="#_1-6-元编程" aria-label="Permalink to &quot;1.6 元编程&quot;">​</a></h3><ul><li>使用 <code>type()</code> 动态创建类。</li><li>类装饰器和函数装饰器的实现。</li><li>使用 <code>__new__</code> 和 <code>__init__</code> 方法自定义对象创建过程。</li></ul><h3 id="_1-7-反射与动态导入" tabindex="-1">1.7 反射与动态导入 <a class="header-anchor" href="#_1-7-反射与动态导入" aria-label="Permalink to &quot;1.7 反射与动态导入&quot;">​</a></h3><ul><li>反射（Reflection）的概念和应用。</li><li>使用 <code>getattr</code>、<code>setattr</code>、<code>hasattr</code> 和 <code>delattr</code> 进行动态属性操作。</li><li>动态导入模块和类。</li></ul><h3 id="_1-8-性能优化" tabindex="-1">1.8 性能优化 <a class="header-anchor" href="#_1-8-性能优化" aria-label="Permalink to &quot;1.8 性能优化&quot;">​</a></h3><ul><li>类和对象的性能问题及优化技巧。</li><li>内存管理和垃圾回收机制。</li><li>使用 <code>slots</code> 优化内存使用。</li></ul><h3 id="_1-9-实战项目" tabindex="-1">1.9 实战项目 <a class="header-anchor" href="#_1-9-实战项目" aria-label="Permalink to &quot;1.9 实战项目&quot;">​</a></h3><ul><li>创建一个综合运用上述知识的项目。</li><li>代码审查和优化。</li></ul><h3 id="_1-10-总结与评估" tabindex="-1">1.10 总结与评估 <a class="header-anchor" href="#_1-10-总结与评估" aria-label="Permalink to &quot;1.10 总结与评估&quot;">​</a></h3><ul><li>复习所学内容。</li><li>通过小测验和项目评估学习效果。---</li></ul><p>请说 <strong>&quot;/start&quot;</strong> 开始学习计划。</p><p>You:</p><ul><li>/start</li></ul><p>ChatGPT:</p><hr><p><strong>主题</strong> : Python 类的深入理解---</p><h2 id="主课" tabindex="-1">主课 <a class="header-anchor" href="#主课" aria-label="Permalink to &quot;主课&quot;">​</a></h2><h3 id="_1-1-python-类的深入理解-1" tabindex="-1">1.1 Python 类的深入理解 <a class="header-anchor" href="#_1-1-python-类的深入理解-1" aria-label="Permalink to &quot;1.1 Python 类的深入理解&quot;">​</a></h3><h4 id="_1-1-1-类和对象的内部工作机制" tabindex="-1">1.1.1 类和对象的内部工作机制 <a class="header-anchor" href="#_1-1-1-类和对象的内部工作机制" aria-label="Permalink to &quot;1.1.1 类和对象的内部工作机制&quot;">​</a></h4><p>在 Python 中，一切皆对象。类是创建对象的蓝图，而对象是类的实例。理解类和对象的内部工作机制是掌握面向对象编程的基础。</p><ul><li><strong>类的定义</strong> ：类是通过 <code>class</code> 关键字定义的。类可以包含属性（变量）和方法（函数）。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    class_attribute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;I am a class attribute&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.instance_attribute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> instance_method</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Instance method called, instance attribute: </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.instance_attribute</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span></span></code></pre></div><ul><li><strong>对象的创建</strong> ：对象是类的实例，通过调用类的构造方法（通常是 <code>__init__</code> 方法）来创建。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">my_object </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyClass(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;I am an instance attribute&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(my_object.class_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: I am a class attribute</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(my_object.instance_method())  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: Instance method called, instance attribute: I am an instance attribute</span></span></code></pre></div><h4 id="_1-1-2-元类-metaclass-的概念及其应用" tabindex="-1">1.1.2 元类（Metaclass）的概念及其应用 <a class="header-anchor" href="#_1-1-2-元类-metaclass-的概念及其应用" aria-label="Permalink to &quot;1.1.2 元类（Metaclass）的概念及其应用&quot;">​</a></h4><p>元类是创建类的类。默认情况下，Python 中的所有类都是由 <code>type</code> 元类创建的。元类可以控制类的创建和行为，是一种高级特性。</p><ul><li><strong>自定义元类</strong> ：可以通过继承 <code>type</code> 来创建自定义元类，并通过 <code>__new__</code> 和 <code>__init__</code> 方法来修改类的创建过程。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls, name, bases, dct):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Creating class </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name, bases, dct)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">metaclass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">MyMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: Creating class MyClass</span></span></code></pre></div><p>元类在框架开发中非常有用，因为它们可以在类创建时自动添加或修改属性和方法。---</p><h3 id="互动时间" tabindex="-1">互动时间 <a class="header-anchor" href="#互动时间" aria-label="Permalink to &quot;互动时间&quot;">​</a></h3><p>你对类和对象的工作机制以及元类的概念有任何问题吗？或者你想尝试一个小练习来巩固这些概念？🦌</p><p>You:</p><ul><li>class_attribute 和 def <strong>init</strong>(self, value): 中的 self.instance_attribute = value 有什么区别</li></ul><p>ChatGPT:</p><ul><li>好的，让我们仔细看看 <code>class_attribute</code> 和 <code>self.instance_attribute</code> 的区别。🦌</li></ul><h3 id="类属性和实例属性的区别" tabindex="-1">类属性和实例属性的区别 <a class="header-anchor" href="#类属性和实例属性的区别" aria-label="Permalink to &quot;类属性和实例属性的区别&quot;">​</a></h3><h4 id="_1-类属性-class-attribute" tabindex="-1">1. 类属性 (Class Attribute) <a class="header-anchor" href="#_1-类属性-class-attribute" aria-label="Permalink to &quot;1. 类属性 (Class Attribute)&quot;">​</a></h4><ul><li><strong>定义</strong> ：类属性是直接在类体内定义的属性，它属于类本身，而不是某个特定的对象。</li><li><strong>作用范围</strong> ：类属性在所有该类的实例中是共享的。也就是说，所有实例共享同一个类属性。</li><li><strong>访问方式</strong> ：可以通过类名或实例来访问类属性。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    class_attribute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;I am a class attribute&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 通过类名访问类属性</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(MyClass.class_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: I am a class attribute</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建实例并通过实例访问类属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyClass()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance1.class_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: I am a class attribute</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 修改类属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">MyClass.class_attribute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;New value&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(MyClass.class_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: New value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance1.class_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: New value</span></span></code></pre></div><h4 id="_2-实例属性-instance-attribute" tabindex="-1">2. 实例属性 (Instance Attribute) <a class="header-anchor" href="#_2-实例属性-instance-attribute" aria-label="Permalink to &quot;2. 实例属性 (Instance Attribute)&quot;">​</a></h4><ul><li><strong>定义</strong> ：实例属性是在类的构造方法（通常是 <code>__init__</code> 方法）中使用 <code>self</code> 关键字定义的属性。它属于类的每个具体实例。</li><li><strong>作用范围</strong> ：实例属性只在创建它们的那个对象中存在，每个实例都有自己独立的实例属性。</li><li><strong>访问方式</strong> ：只能通过实例来访问实例属性。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self, value):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.instance_attribute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 创建实例并通过实例访问实例属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyClass(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Instance 1 value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyClass(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Instance 2 value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance1.instance_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: Instance 1 value</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance2.instance_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: Instance 2 value</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 修改实例属性</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance1.instance_attribute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &quot;New value for instance 1&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance1.instance_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: New value for instance 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance2.instance_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: Instance 2 value</span></span></code></pre></div><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><ul><li><strong>类属性</strong> ：共享给所有实例，属于类本身。</li><li><strong>实例属性</strong> ：每个实例独有，属于具体的实例。</li></ul><p>希望这个解释能帮助你理解类属性和实例属性的区别。如果你有更多问题，或者想要进一步练习，请告诉我！🦌</p><p>You:</p><ul><li>好的，接下来详细讲解自定义元类</li></ul><p>ChatGPT:</p><ul><li>好的，接下来我们详细讲解一下自定义元类。元类是一个相对高级的概念，但理解它们可以让你更好地掌控 Python 类的创建和行为。</li></ul><h3 id="什么是元类-metaclass" tabindex="-1">什么是元类 (Metaclass)？ <a class="header-anchor" href="#什么是元类-metaclass" aria-label="Permalink to &quot;什么是元类 (Metaclass)？&quot;">​</a></h3><p>元类是创建类的类。换句话说，元类可以控制类的创建、修改类的属性和方法等。默认情况下，Python 中所有的类都是由 <code>type</code> 元类创建的。</p><h3 id="自定义元类" tabindex="-1">自定义元类 <a class="header-anchor" href="#自定义元类" aria-label="Permalink to &quot;自定义元类&quot;">​</a></h3><p>你可以通过继承 <code>type</code> 类来创建自定义元类，并重写 <code>__new__</code> 和 <code>__init__</code> 方法来修改类的创建过程。</p><h4 id="new-方法" tabindex="-1"><code>__new__</code> 方法 <a class="header-anchor" href="#new-方法" aria-label="Permalink to &quot;\`__new__\` 方法&quot;">​</a></h4><p><code>__new__</code> 方法是在类创建之前调用的。它用于创建并返回一个新的类对象。</p><h4 id="init-方法" tabindex="-1"><code>__init__</code> 方法 <a class="header-anchor" href="#init-方法" aria-label="Permalink to &quot;\`__init__\` 方法&quot;">​</a></h4><p><code>__init__</code> 方法是在类创建之后调用的。它用于初始化类对象。</p><h3 id="自定义元类的实现" tabindex="-1">自定义元类的实现 <a class="header-anchor" href="#自定义元类的实现" aria-label="Permalink to &quot;自定义元类的实现&quot;">​</a></h3><p>以下是一个简单的自定义元类的例子：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 定义自定义元类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls, name, bases, dct):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Creating class </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        # 在这里可以添加或修改类的属性和方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        dct[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;added_attribute&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;This is an added attribute&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name, bases, dct)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls, name, bases, dct):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Initializing class </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name, bases, dct)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 使用自定义元类创建类</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">metaclass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">MyMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.instance_attribute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;Instance attribute&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 实例化类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyClass()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance.added_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: This is an added attribute</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance.instance_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: Instance attribute</span></span></code></pre></div><h3 id="解释" tabindex="-1">解释 <a class="header-anchor" href="#解释" aria-label="Permalink to &quot;解释&quot;">​</a></h3><ol><li><strong>MyMeta</strong> ：</li></ol><ul><li>继承自 <code>type</code>。</li><li>重写 <code>__new__</code> 方法，添加了 <code>added_attribute</code> 属性。</li><li>重写 <code>__init__</code> 方法，用于初始化类对象。</li></ul><ol start="2"><li><strong>MyClass</strong> ：</li></ol><ul><li><code>MyClass</code> 的元类被设置为 <code>MyMeta</code>，因此在创建 <code>MyClass</code> 时，会调用 <code>MyMeta</code> 的 <code>__new__</code> 和 <code>__init__</code> 方法。</li></ul><ol start="3"><li><strong>MyClass</strong> ：</li></ol><ul><li>创建 <code>MyClass</code> 的实例 <code>instance</code>。</li><li><code>instance</code> 具有 <code>added_attribute</code>（由元类添加）和 <code>instance_attribute</code>（由实例初始化）。</li></ul><h3 id="元类的应用场景" tabindex="-1">元类的应用场景 <a class="header-anchor" href="#元类的应用场景" aria-label="Permalink to &quot;元类的应用场景&quot;">​</a></h3><p>元类在以下场景中特别有用：</p><ol><li><strong>自动注册类</strong> ：在框架开发中，自动注册类到某个注册表。</li><li><strong>单例模式</strong> ：控制类的实例化过程，确保某个类只有一个实例。</li><li><strong>自动添加属性和方法</strong> ：在类创建时，自动添加或修改属性和方法。</li><li><strong>数据验证</strong> ：在类创建时，自动进行数据验证或处理。</li></ol><h3 id="实战示例-单例模式" tabindex="-1">实战示例：单例模式 <a class="header-anchor" href="#实战示例-单例模式" aria-label="Permalink to &quot;实战示例：单例模式&quot;">​</a></h3><p>使用元类实现单例模式，确保一个类只有一个实例：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SingletonMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    _instances </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __call__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._instances:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._instances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__call__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">kwargs)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._instances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SingletonClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">metaclass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">SingletonMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 测试单例模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SingletonClass()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SingletonClass()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> instance2)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: True</span></span></code></pre></div><p>在这个示例中，<code>SingletonMeta</code> 元类通过重写 <code>__call__</code> 方法来控制类的实例化过程，确保 <code>SingletonClass</code> 只有一个实例。</p><p>希望这个详细讲解能帮助你理解和应用自定义元类。如果你有任何问题或需要进一步的解释，请告诉我！🦌</p><p>You:</p><ul><li>进一步解释</li></ul><p>ChatGPT:</p><ul><li>好的，我们来进一步深入解释自定义元类的概念和其应用。</li></ul><h3 id="元类的基本概念" tabindex="-1">元类的基本概念 <a class="header-anchor" href="#元类的基本概念" aria-label="Permalink to &quot;元类的基本概念&quot;">​</a></h3><p>在 Python 中，所有的类都是通过一个叫做“元类”的东西创建的。默认的元类是 <code>type</code>。当你定义一个类时，Python 使用 <code>type</code> 创建这个类的对象。元类允许你干预类的创建过程。</p><h3 id="type-的使用" tabindex="-1"><code>type</code> 的使用 <a class="header-anchor" href="#type-的使用" aria-label="Permalink to &quot;\`type\` 的使用&quot;">​</a></h3><p>让我们首先看看如何使用 <code>type</code> 来动态创建类：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 使用 type 动态创建一个类</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">MyClass </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;MyClass&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, (</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">object</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,), {</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;class_attribute&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;I am a class attribute&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 实例化 MyClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyClass()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance.class_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: I am a class attribute</span></span></code></pre></div><p>这里我们使用 <code>type</code> 创建了一个名为 <code>MyClass</code> 的类，它继承自 <code>object</code>，并且有一个类属性 <code>class_attribute</code>。</p><h3 id="自定义元类-1" tabindex="-1">自定义元类 <a class="header-anchor" href="#自定义元类-1" aria-label="Permalink to &quot;自定义元类&quot;">​</a></h3><p>你可以通过继承 <code>type</code> 来创建自定义元类，重写 <code>__new__</code> 和 <code>__init__</code> 方法以控制类的创建和初始化过程。</p><h4 id="_1-new-方法" tabindex="-1">1. <code>__new__</code> 方法 <a class="header-anchor" href="#_1-new-方法" aria-label="Permalink to &quot;1. \`__new__\` 方法&quot;">​</a></h4><p><code>__new__</code> 方法在类创建之前被调用，用于创建类的实例。它接受以下参数：</p><ul><li><code>cls</code>：当前准备创建的类。</li><li><code>name</code>：类名。</li><li><code>bases</code>：类的基类（父类）的元组。</li><li><code>dct</code>：类的属性和方法字典。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls, name, bases, dct):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Creating class </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        # 在这里可以添加或修改类的属性和方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        dct[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;added_attribute&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;This is an added attribute&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name, bases, dct)</span></span></code></pre></div><h4 id="_2-init-方法" tabindex="-1">2. <code>__init__</code> 方法 <a class="header-anchor" href="#_2-init-方法" aria-label="Permalink to &quot;2. \`__init__\` 方法&quot;">​</a></h4><p><code>__init__</code> 方法在类创建之后被调用，用于初始化类对象。它接受以下参数：</p><ul><li><code>cls</code>：当前准备创建的类。</li><li><code>name</code>：类名。</li><li><code>bases</code>：类的基类（父类）的元组。</li><li><code>dct</code>：类的属性和方法字典。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls, name, bases, dct):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Initializing class </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name, bases, dct)</span></span></code></pre></div><h3 id="应用示例-自定义元类" tabindex="-1">应用示例：自定义元类 <a class="header-anchor" href="#应用示例-自定义元类" aria-label="Permalink to &quot;应用示例：自定义元类&quot;">​</a></h3><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls, name, bases, dct):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Creating class </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        dct[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;added_attribute&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;This is an added attribute&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__new__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, name, bases, dct)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls, name, bases, dct):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">f</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;Initializing class </span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">{</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">name</span><span style="--shiki-light:#005CC5;--shiki-dark:#F47067;">}</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(name, bases, dct)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> MyClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">metaclass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">MyMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.instance_attribute </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> &#39;Instance attribute&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 实例化 MyClass</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> MyClass()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance.added_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: This is an added attribute</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance.instance_attribute)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: Instance attribute</span></span></code></pre></div><p>在这个示例中：</p><ol><li><strong>MyMeta</strong> ：</li></ol><ul><li>在 <code>__new__</code> 方法中，我们添加了一个 <code>added_attribute</code> 属性到类中。</li><li>在 <code>__init__</code> 方法中，我们初始化类。</li></ul><ol start="2"><li><strong>MyClass</strong> ：</li></ol><ul><li><code>MyClass</code> 使用 <code>MyMeta</code> 作为它的元类，因此在创建 <code>MyClass</code> 时会调用 <code>MyMeta</code> 的 <code>__new__</code> 和 <code>__init__</code> 方法。</li></ul><ol start="3"><li><strong>MyClass</strong> ：</li></ol><ul><li>创建 <code>MyClass</code> 的实例 <code>instance</code>，该实例具有 <code>added_attribute</code>（由元类添加）和 <code>instance_attribute</code>（由实例初始化）。</li></ul><h3 id="实战应用-单例模式" tabindex="-1">实战应用：单例模式 <a class="header-anchor" href="#实战应用-单例模式" aria-label="Permalink to &quot;实战应用：单例模式&quot;">​</a></h3><p>单例模式是一种设计模式，确保一个类只有一个实例。我们可以使用元类来实现单例模式：</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SingletonMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">type</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    _instances </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> __call__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(cls, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">kwargs):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        if</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cls</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._instances:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">            cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._instances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> super</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">().</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">__call__</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">args, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">kwargs)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        return</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">._instances[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">cls</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SingletonClass</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">metaclass</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#6CB6FF;">SingletonMeta</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 测试单例模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SingletonClass()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">instance2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> SingletonClass()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(instance1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">is</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> instance2)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"># 输出: True</span></span></code></pre></div><p>在这个示例中：</p><ol><li><strong>SingletonMeta</strong> ：</li></ol><ul><li>重写了 <code>__call__</code> 方法，确保每次实例化类时，返回的都是同一个实例。</li></ul><ol start="2"><li><strong>SingletonClass</strong> ：</li></ol><ul><li><code>SingletonClass</code> 使用 <code>SingletonMeta</code> 作为元类，因此在实例化时会调用 <code>SingletonMeta</code> 的 <code>__call__</code> 方法。</li></ul><ol start="3"><li><strong>测试单例模式</strong> ：</li></ol><ul><li>创建两个 <code>SingletonClass</code> 的实例 <code>instance1</code> 和 <code>instance2</code>，它们实际上是同一个实例。</li></ul><p>希望这个详细的解释能帮助你更好地理解和应用自定义元类。如果你有更多问题或需要进一步的示例，请告诉我！🦌</p>`,125);function u(s,_,D,B,b,E){const t=r,h=o("ClientOnly");return n(),g("div",null,[C,e(h,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),k(t,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),A,e(h,null,{default:p(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(n(),k(t,{key:0,article:s.$frontmatter},null,8,["article"])):d("",!0)]}),_:1}),F])}const v=c(y,[["render",u]]);export{M as __pageData,v as default};
