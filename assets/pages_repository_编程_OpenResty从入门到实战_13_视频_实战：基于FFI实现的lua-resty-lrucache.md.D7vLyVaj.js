import{_ as e,c as a,G as s,b as t}from"./chunks/framework.D5KJDRhN.js";const p=JSON.parse('{"title":"13[视频]实战：基于FFI实现的lua-resty-lrucache","description":"","frontmatter":{"title":"13[视频]实战：基于FFI实现的lua-resty-lrucache","date":"2025-02-22T00:00:00.000Z","categories":["OpenResty从入门到实战"],"head":[["link",{"rel":"canonical","href":"https://www.doit.ip-ddns.com/pages/repository/编程/OpenResty从入门到实战/13[视频]实战：基于FFI实现的lua-resty-lrucache"}]]},"headers":[],"relativePath":"pages/repository/编程/OpenResty从入门到实战/13[视频]实战：基于FFI实现的lua-resty-lrucache.md","filePath":"pages/repository/编程/OpenResty从入门到实战/13[视频]实战：基于FFI实现的lua-resty-lrucache.md","lastUpdated":1740213738000}');const r=e({name:"pages/repository/编程/OpenResty从入门到实战/13[视频]实战：基于FFI实现的lua-resty-lrucache.md"},[["render",function(e,p,r,n,l,i){return t(),a("div",null,p[0]||(p[0]=[s('<div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                            13 [视频]实战：基于FFI实现的lua-resty-lrucache</span></span>\n<span class="line"><span>                            13 [视频]实战：基于FFI实现的lua-resty-lrucache</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>你好，我是温铭。</p><p>今天的内容，我同样会以视频的形式来讲解。不过，在你进行视频学习之前，我想先问你这么几个问题：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>lua-resty-lrucache 内部最重要的数据结构是什么？</span></span>\n<span class="line"><span>lua-resty-lrucache 有两种 FFI 的实现，我们今天讲的这一种更适合什么场景？</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>这几个问题，也是今天视频课要解决的核心内容，希望你可以先自己思考一下，并带着问题来学习今天的视频内容。</p><p>同时，我会给出相应的文字介绍，方便你在听完视频内容后，及时总结与复习。下面是今天这节课的文字介绍部分。</p><p>今日核心</p><p>lua-resty-lrucache 是一个使用 LuaJIT FFI 实现的 LRU 缓存库，可以在 worker 内缓存各种类型的数据。功能与之类似的是 shared dict，但 shared dict 只能存储字符串类型的数据。在大多数实际情况下，这两种缓存是配合在一起使用的——lrucache 作为一级缓存，shared dict 作为二级缓存。</p><p>lrucache 的实现，并没有涉及到 OpenResty 的 Lua API。所以，即使你以前没有用过OpenResty，也可以通过这个项目来学习如何使用 LuaJIT 的 FFI。</p><p>lrucache 仓库中包含了两种实现方案，一种是使用 Lua table 来实现缓存，另外一种则是使用 hash 表来实现。前者更适合命中率高的情况，后者适合命中率低的情况。两个方案没有哪个更好，要看你的线上环境更适合哪一个。</p><p>通过今天这个项目，你可以弄清楚要如何使用 FFI，并了解一个完整的 lua-resty 库应该包括哪些必要的内容。当然，我顺道也会介绍下 travis 的使用。</p><p>最后，还是想强调一点，在你面对一个陌生的开源项目时，文档和测试案例永远是最好的上手方式。而你后期如果要阅读源码，也不要先去抠细节，而是应该先去看主要的数据结构，围绕重点逐层深入。</p><p>课件参考</p><p>今天的课件已经上传到了我的GitHub上，你可以自己下载学习。</p><p>链接如下：<a href="https://github.com/iresty/geektime-slides" target="_blank" rel="noreferrer">https://github.com/iresty/geektime-slides</a></p><p>如果有不清楚的地方，你可以在留言区提问，另也可以在留言区分享你的学习心得。期待与你的对话，也欢迎你把这篇文章分享给你的同事、朋友，我们一起交流、一起进步。</p>',16)]))}]]);export{p as __pageData,r as default};
