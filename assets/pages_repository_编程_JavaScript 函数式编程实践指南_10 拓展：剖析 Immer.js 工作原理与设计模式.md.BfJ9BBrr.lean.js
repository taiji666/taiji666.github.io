import{_ as s,c as a,e as i,G as n,E as e,b as p}from"./chunks/framework.D5KJDRhN.js";const l=JSON.parse('{"title":"10 拓展：剖析 Immer.js 工作原理与设计模式","description":"","frontmatter":{"title":"10 拓展：剖析 Immer.js 工作原理与设计模式","date":"2025-02-22T00:00:00.000Z","categories":["JavaScript 函数式编程实践指南"],"head":[["link",{"rel":"canonical","href":"https://www.doit.ip-ddns.com/pages/repository/编程/JavaScript 函数式编程实践指南/10 拓展：剖析 Immer.js 工作原理与设计模式"}]]},"headers":[],"relativePath":"pages/repository/编程/JavaScript 函数式编程实践指南/10 拓展：剖析 Immer.js 工作原理与设计模式.md","filePath":"pages/repository/编程/JavaScript 函数式编程实践指南/10 拓展：剖析 Immer.js 工作原理与设计模式.md","lastUpdated":1739887664000}'),t={id:"",tabindex:"-1"},r={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},h={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.452ex"},xmlns:"http://www.w3.org/2000/svg",width:"22.624ex",height:"2.149ex",role:"img",focusable:"false",viewBox:"0 -750 10000 950","aria-hidden":"true"};const k=s({name:"pages/repository/编程/JavaScript 函数式编程实践指南/10 拓展：剖析 Immer.js 工作原理与设计模式.md"},[["render",function(s,l,k,d,o,c){return p(),a("div",null,[i("h4",t,[i("mjx-container",r,[(p(),a("svg",h,l[0]||(l[0]=[n('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mstyle" fill="lightPink" stroke="lightPink"><g data-mml-node="mi"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">保</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">姆</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">式</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">教</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">学</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">の</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">温</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">馨</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">提</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">示</text></g></g></g></g>',1)]))),l[1]||(l[1]=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mstyle",{mathcolor:"lightPink"},[i("mi",{mathvariant:"normal"},"保"),i("mi",{mathvariant:"normal"},"姆"),i("mi",{mathvariant:"normal"},"式"),i("mi",{mathvariant:"normal"},"教"),i("mi",{mathvariant:"normal"},"学"),i("mi",{mathvariant:"normal"},"の"),i("mi",{mathvariant:"normal"},"温"),i("mi",{mathvariant:"normal"},"馨"),i("mi",{mathvariant:"normal"},"提"),i("mi",{mathvariant:"normal"},"示")])])],-1))]),l[2]||(l[2]=e()),l[3]||(l[3]=i("a",{class:"header-anchor",href:"#","aria-label":'Permalink to "$\\color{lightPink}保姆式教学の温馨提示$"'},"​",-1))]),l[4]||(l[4]=n('<p>本节内容包含两部分，前半部分是对上一节的剖析和拓展（话题核心仍然是 Immer.js），后半部分则是对整个 Immutability 知识模块的总结。</p><p>其中，前半部分属于选学内容，跳过它，并不影响你理解函数式编程。</p><p>如果你时间有限，希望尽快地构建函数式编程的整体知识脉络，那么你可以直接跳到本节的“总结”部分。</p><p>如果你对 Immer.js 很感兴趣，又不小心跳读到了这里，那么你需要往回再跳一节，以此来获取阅读本节所需的知识上下文。</p><h2 id="produce-工作原理-将拷贝操作精准化" tabindex="-1">Produce 工作原理：将拷贝操作精准化 <a class="header-anchor" href="#produce-工作原理-将拷贝操作精准化" aria-label="Permalink to &quot;Produce 工作原理：将拷贝操作精准化&quot;">​</a></h2><p>结合上一节的源码提取+解析，我们不难看出，<code>produce</code> 可以像 Immutable.js 一样，精准打击那些需要执行写操作的数据。<strong>将“变与不变”分离，确保只有变化的部分被处理，而不变的部分则将继续留在原地。</strong></p><p>但 <code>produce</code> 并没有像 Immutable.js 一样打数据结构的主意，而是将火力集中对准了“拷贝”这个动作。</p><p>它严格地控制了“拷贝”发生的时机：当且仅当写操作确实发生时，拷贝动作才会被执行。</p><p>具体到我们在上一节讨论过的用例来说，在我们调用 <code>produce</code> 执行读操作前后，<code>baseObj</code> 和 <code>doNothingObj</code> 是严格相等的：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是我的源对象</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> baseObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  a: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  b: {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;修言&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是一个执行写操作的 recipe</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> changeA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">draft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  draft.a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是一个不执行写操作、只执行读操作的 recipe</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> doNothing</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">draft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;doNothing function is called, and draft is&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, draft)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 借助 produce，对源对象应用写操作，修改源对象里的 a 属性</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> changedObjA</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseObj, changeA)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 借助 produce，对源对象应用读操作</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> doNothingObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseObj, doNothing)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 顺序输出3个对象，确认写操作确实生效了</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseObj)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(changedObjA)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(doNothingObj)</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 【源对象】 和 【借助 produce 对源对象执行过读操作后的对象】 还是同一个对象吗？</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 答案为 true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> doNothingObj)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 【源对象】 和 【借助 produce 对源对象执行过写操作后的对象】 还是同一个对象吗？</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 答案为 false</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> changedObjA)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 源对象里没有被执行写操作的 b 属性，在 produce 执行前后是否会发生变化？</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出为 true，说明不会发生变化</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseObj.b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> changedObjA.b)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br></div></div><p><strong>只要写操作没执行，拷贝动作就不会发生</strong>。</p><p>只有当写操作确实执行，也就是当我们试图修改 <code>baseObj</code> 的 <code>a</code> 属性时，<code>produce</code> 才会去执行拷贝动作：先浅拷贝一个 <code>baseObj</code> 的副本对象（<code>changedObjA</code>）出来，然后再修改 <code>changedObjA</code> 里的 <code>a</code>。</p><p>这一步对应的是 <code>produce</code> 函数对 <code>setter</code> 的代理逻辑：</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> baseHandler</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">obj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 先检查 copy 是否存在，如果不存在，创建 copy</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">copy) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      copy </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">base }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 如果 copy 存在，修改 copy，而不是 base</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    copy[key] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> value</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>这样一来，<code>changedObjA</code> 和 <code>baseObj</code> 显然是两个不同的对象，<strong>数据内容的变化和引用的变化同步发生了</strong>，这<strong>符合我们对 Immutability 的预期</strong>。</p><p>与此同时，<code>changedObjA.b</code> 和 <code>baseObj.b</code> 是严格相等的，说明两个引用不同的对象，仍然<strong>共享着那些没有实际被修改到的数据</strong>。由此也就实现了数据共享，避免了暴力拷贝带来的各种问题。</p><p><code>produce</code> 借助 Proxy，将拷贝动作发生的时机和 <code>setter</code> 函数的触发时机牢牢绑定，确保了拷贝动作的精确性。 而逐层的浅拷贝，则间接地实现了数据在新老对象间的共享。</p><h2 id="拓展-知其所止-的-逐层拷贝" tabindex="-1">拓展：“知其所止”的“逐层拷贝” <a class="header-anchor" href="#拓展-知其所止-的-逐层拷贝" aria-label="Permalink to &quot;拓展：“知其所止”的“逐层拷贝”&quot;">​</a></h2><p>这里我想要给大家展开说明一下这个“逐层的”浅拷贝。</p><p>在我们的极简版 <code>produce</code> 里，着重突出了 <code>setter</code> 函数的写逻辑，也就是对“拷贝时机”的描述，淡化了其它执行层面的细节。</p><p>而在 Immer.js 中，完整版 <code>produce</code> 的浅拷贝其实是<strong>可递归</strong>的。</p><p>举例来说，在本文的案例中，<code>baseObj</code> 是一个嵌套对象，一共有两层（如下图红圈所示）：</p><p><a class="img-fancybox" href="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/184f1ff1dbb9442fa1b30170e245697c~tplv-k3u1fbpfcp-zoom-1.image" data-fancybox="gallery" data-caption=""><img class="post-img" src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/184f1ff1dbb9442fa1b30170e245697c~tplv-k3u1fbpfcp-zoom-1.image" alt="" loading="lazy"><span class="post-img-tip"></span></a></p><p>外面的圈圈表示第一层，里面的圈圈表示第二层（也就是 <code>b</code> 属性指向的对象）。</p><p><strong>无论对象嵌套了多少层，每一层对于写操作的反应是一致的，都会表现为“修改时拷贝”。</strong></p><p>我继续用 <code>baseObj</code> 举个例子，这次我们来看 <code>b</code> 属性（它是一个对象）。</p><p>如果我对 <code>b</code> 属性执行了写操作，结果会是怎样的呢？</p><p>请看下面这段代码（注意看解析）：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> produce </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;immer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这是一个执行引用类型写操作的 recipe</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> changeB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">draft</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  draft.b.name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; 修个锤子&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 借助 produce 调用 changeB</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> changedObjB</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> produce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseObj, changeB)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 【源对象】 和 【借助 produce 对源对象执行过写操作后的对象】 还是同一个对象吗？</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 答案为 false</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseObj </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> changedObjB)</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 【b 属性】 和 【借助 produce 修改过的 b 属性】 还是同一个对象吗？</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 答案为 false</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(baseObj.b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> changedObjB.b)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>从结果上来看， 即便对于嵌套的对象来说，<strong>数据内容的变化和引用的变化也能同步发生</strong>。</p><p>这是因为 <code>produce</code> <strong>不仅会拦截</strong> <code>setter</code> <strong>，也会拦截</strong> <code>getter</code>。</p><p>通过对 <code>getter</code> 的拦截，<code>produce</code> 能够按需地对被访问到的属性进行“懒代理”：你访问得有多深，代理逻辑就能走多深；而所有被代理的属性，都会具备新的 <code>setter</code> 方法。</p><p>当写操作发生时，<code>setter</code> 方法就会被逐层触发，呈现“逐层浅拷贝”的效果。</p><p><strong>“逐层浅拷贝”是 Immer 实现数据共享的关键。</strong></p><p>假设我的对象嵌套层级为 10 层，而我对它的属性修改只会触达第 2 层，“逐层的浅拷贝”就能够帮我们确保拷贝只会进行到第 2 层。</p><p>“逐层的浅拷贝”如果递归到最后一层，就会变成深拷贝。</p><p>对于引用类型数据来说，“暴力拷贝”指的也就是深拷贝。</p><p>“暴力拷贝”之所以会带来大量的时间空间上的浪费，本质上是因为它在拷贝的过程中不能够“<strong>知其所止</strong>”。</p><p>而“逐层的浅拷贝”之所以能够实现数据共享，正是因为它借助 Proxy 做到了“<strong>知其所止</strong>”。</p><p>（注：实际 produce 源码中递归的实现会复杂得多，Immer.js 在性能方面的各种处理也复杂得多。本文扣题函数式思想，仅提取 produce 中与不可变数据强相关的逻辑进行了选讲，对完整源码感兴趣的同学请狠狠地点击<a href="https://github.com/immerjs/immer" target="_blank" rel="noreferrer">这里</a>）</p><h2 id="思考-知其所止-的软件设计表达" tabindex="-1">思考：“知其所止”的软件设计表达 <a class="header-anchor" href="#思考-知其所止-的软件设计表达" aria-label="Permalink to &quot;思考：“知其所止”的软件设计表达&quot;">​</a></h2><p>无论是“精准拷贝”、“修改时拷贝”，还是“逐层拷贝”，其背后体现的都是同一个思想——“按需”。</p><p>“知其所止”的软件设计表达，就是“按需”。</p><p>对于 Immutable.js 来说，它通过构建一套原生 JS 无法支持的 Trie 数据结构，最终实现了树节点的按需创建。</p><p>对于 Immer.js 来说，它借助 Proxy 的 getter 函数实现了按需代理，借助 Proxy 的 setter 函数实现了对象属性的按需拷贝。</p><p>可见，想要实现高效的 Immutability，“按需变化”是一个不错的切入点。</p><h2 id="总结-immutability-的实践演进" tabindex="-1">总结： Immutability 的实践演进 <a class="header-anchor" href="#总结-immutability-的实践演进" aria-label="Permalink to &quot;总结： Immutability 的实践演进&quot;">​</a></h2><p>至此，关于 Immutability ，我们已经讨论了 5 节。</p><p>现在请大家回顾一下：对于 JS 来说，Immutability 实践的直接目的是什么？</p><p>简单来说，是为了解决<strong>数据内容变化与数据引用变化不同步的问题</strong>。</p><p>我拿到一个引用类型数据（<code>A</code>)，修改了其中的一个 <code>a</code> 属性，然后所有依赖 <code>A.a</code> 进行计算的函数逻辑全炸了，牵一发而动全身，这不是我们想要的结局。</p><p>我们希望一旦引用类型数据（<code>A</code>）的内容改变了，我们就能获取到一个新的引用，这个引用指向一套已经发生改变的数据（<code>A&#39;</code>)， <code>A</code> 和 <code>A&#39;</code> 应该是泾渭分明的。</p><p>暴力拷贝，可以做到“泾渭分明”，但是对于规模较大的数据来说，它太低效了。</p><p>于是，社区的 Immutability 解决方案百花齐放，Immer.js 和 Immutable.js 就是其中的佼佼者。</p><p>Immutable.js 底层是持久化数据结构，而 Immer.js 的底层是 Proxy 代理模式。</p><p>两者虽然在具体的工作原理上大相径庭，但最终指向的目的却是一致的：使数据的引用与数据内容的变化同步发生；并且在这个过程中，按需处理具体的变化点，提升不可变数据的执行效率。</p><p>（阅读过程中有任何想法或疑问，或者单纯希望和笔者交个朋友啥的，欢迎大家添加我的微信xyalinode与我交流哈~）</p>',57))])}]]);export{l as __pageData,k as default};
