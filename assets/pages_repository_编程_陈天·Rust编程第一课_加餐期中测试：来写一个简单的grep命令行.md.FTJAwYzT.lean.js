import{_ as s,c as a,G as i,b as n}from"./chunks/framework.D5KJDRhN.js";const p=JSON.parse('{"title":"加餐期中测试：来写一个简单的grep命令行","description":"","frontmatter":{"title":"加餐期中测试：来写一个简单的grep命令行","date":"2025-02-22T00:00:00.000Z","categories":["陈天·Rust编程第一课"],"head":[["link",{"rel":"canonical","href":"https://www.doit.ip-ddns.com/pages/repository/编程/陈天·Rust编程第一课/加餐期中测试：来写一个简单的grep命令行"}]]},"headers":[],"relativePath":"pages/repository/编程/陈天·Rust编程第一课/加餐期中测试：来写一个简单的grep命令行.md","filePath":"pages/repository/编程/陈天·Rust编程第一课/加餐期中测试：来写一个简单的grep命令行.md","lastUpdated":1739887664000}');const e=s({name:"pages/repository/编程/陈天·Rust编程第一课/加餐期中测试：来写一个简单的grep命令行.md"},[["render",function(s,p,e,l,t,h){return n(),a("div",null,p[0]||(p[0]=[i('<div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>                            加餐 期中测试：来写一个简单的grep命令行</span></span>\n<span class="line"><span>                            你好，我是陈天。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>现在 Rust 基础篇已经学完了，相信你已经有足够的信心去应对一些简单的开发任务。今天我们就来个期中测试，实际考察一下你对 Rust 语言的理解以及对所学知识的应用情况。</p><p>我们要做的小工具是 rgrep，它是一个类似 grep 的工具。如果你是一个 *nix 用户，那大概率使用过 grep 或者 ag 这样的文本查找工具。</p><p>grep 命令用于查找文件里符合条件的字符串。如果发现某个文件的内容符合所指定的字符串，grep 命令会把含有字符串的那一行显示出；若不指定任何文件名称，或是所给予的文件名为 -，grep 命令会从标准输入设备读取数据。</p><p>我们的 rgrep 要稍微简单一些，它可以支持以下三种使用场景：</p><p>首先是最简单的，给定一个字符串以及一个文件，打印出文件中所有包含该字符串的行：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rgrep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">55:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> This</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exmaple</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>然后放宽限制，允许用户提供一个正则表达式，来查找文件中所有包含该字符串的行：</p><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rgrep</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hel[^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\\\</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">s]+</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> a.txt</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">55:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Hello</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> world.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> This</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> an</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> exmaple</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> text</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">89:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> Help</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> me!</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> I</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> need</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> assistant!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果这个也可以实现，那进一步放宽限制，允许用户提供一个正则表达式，来查找满足文件通配符的所有文件（你可以使用 globset 或者 glob 来处理通配符），比如：</p><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ rgrep Hel[^\\\\s]+ a*.txt</span></span>\n<span class="line"><span>a.txt </span></span>\n<span class="line"><span>    55:1 Hello world. This is an exmaple text</span></span>\n<span class="line"><span>    89:1 Help me! I need assistant!</span></span>\n<span class="line"><span>    5:6  Use `Help` to get help.</span></span>\n<span class="line"><span>abc.txt:</span></span>\n<span class="line"><span>    100:1 Hello Tyr!</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>其中，冒号前面的数字是行号，后面的数字是字符在这一行的位置。</p><p>给你一点小提示。</p><div class="language-cpp vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">cpp</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对于命令行的部分，你可以使用 clap3 或者 structopt，也可以就用 env.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">args</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对于正则表达式的支持，可以使用 regex。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">至于文件的读取，可以使用 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">std</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::fs 或者 </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">tokio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::fs。你可以顺序对所有满足通配符的文件进行处理，也可以用 rayon 或者 tokio 来并行处理。</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">对于输出的结果，最好能把匹配的文字用不同颜色展示。</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>如果你有余力，可以看看 grep 的文档，尝试实现更多的功能。</p><p>祝你好运！</p><p>加油，我们下节课作业讲解见。</p>',17)]))}]]);export{p as __pageData,e as default};
